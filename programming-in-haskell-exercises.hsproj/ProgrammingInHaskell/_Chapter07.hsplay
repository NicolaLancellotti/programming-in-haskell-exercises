-- Haskell Playground 1.0
---------------------------------------
-- Exercise 1

f = \x -> x * 10
p = \x -> even x
xs = [1, 2 ,3, 4]
[f x | x <- xs, p x]
(map f . filter p) xs

---------------------------------------
-- Exercise 2

all' (== True) [True, True]
all' (== True) [True, False]

any' (== True) [True, False]
any' (== True) [False, False]

takeWhile' odd [1, 3, 4, 5]

dropWhile' odd [1, 3, 4, 5]

---------------------------------------
-- Exercise 3

map' (+1) [1, 2, 3]
filter' even [1, 2, 3]

---------------------------------------
-- Exercise 4

dec2int [2, 3, 4, 5]

---------------------------------------
-- Exercise 5

f = \(a, b) -> a + b
c = curry' f
c 1 2

g = uncurry c
g (1, 2)

---------------------------------------
-- Exercise 6

chop8 [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]

map'' (+1) [1, 2, 3]

take 4 (interate' (*2) 1)

---------------------------------------
-- Exercise 7

transmit channel "Hello, world!"

---------------------------------------
-- Exercise 8

--transmit faultyChannel "Hello, world!"

---------------------------------------
-- Exercise 9

altMap (+10) (+100) [0, 1, 2, 3, 4]

---------------------------------------
-- Exercise 10

luhn 1 7 8 4
luhn 4 7 8 3

luhn' [1, 7, 8, 4]
luhn' [4, 7, 8, 3]
